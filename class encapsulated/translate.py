# This is the main file you use to translate PGML to edX/XML
# Open a .pg file and generate a .xml file with same content
# This file should be in the same folder as code.py and text.py as it uses the classed defined in those two files


import text
import code

while 1:

	# Enter a file name to choose to translate
	filename = raw_input('file name>')	
	try:
		file = open(filename)
	except IOError:
		print 'IOError: No file \'' + filename + '\''
		continue

	data = file.read()
	file.close()

	# Split the original .pg file into 2 parts: code and text
	# Use different class methods to deal with those two parts

	# First step: split .pg file

	# This is the begin of the part : code 
	script_begin_temp = data.find('$showPartialCorrectAnswers = 1;')
	if script_begin_temp != -1:
		script_begin = script_begin_temp+len('$showPartialCorrectAnswers = 1;')
	else:
		script_begin = data.find('TEXT(beginproblem);') + len('TEXT(beginproblem);')
	script_end = data.find('BEGIN_PGML') # This is the end of the part: code
	word_begin = script_end + 10 	# This is the begin of the part : text
	word_end = data.find('END_PGML') # This is the end of the part : text

	# Get the splited file for input 
	script = data[script_begin:script_end]
	word = data[word_begin:word_end]


	# Second step: translate 'code' and 'text' using different class methods 

	# Translate 'text' using class MyText
	n = text.MyText()
	n.build()		# Build lexer
	#n.test(word) 	# Test the lexer of MyText, usually we don't need to print this out
	n.build_parser()# Build parser
	t = n.test_parser(word)	# Test the parser and generate the whole text in XML as we want
	answer = n.MyAnswer()	# Some output generated by MyText as 'answers'
							# This needs to be handled by 'code' part


	# Translate 'code' using class MyCode
	m = code.MyCode()
	m.build()		# Build lexer
	#m.test(script+'\n'+answer) # Test the lexer of MyCode
	m.build_parser()	# Build parser
	c = m.test_parser(script+'\n'+answer) 	# Generate the whole code part


	# Open a new XML file with the same name as the original PG file 
	# Write all contents back
	filename_split = filename.find('.pg')
	write_file = open(filename[:filename_split]+'.xml','w')
	write_file.write( c+t)
	write_file.close()


