# This is the main file you use to translate PGML to edX/XML
# Open a .pg file and generate a .xml file with same content
# This file should be in the same folder as code.py and text.py as it uses the classed defined in those two files


import text1
import code,re

while 1:

	# Enter a file name to choose to translate
	filename = raw_input('file name>')
	if filename == 'quit':
		exit()	
	try:
		file = open(filename)
	except IOError:
		print 'IOError: No file \'' + filename + '\''
		continue

	data = file.read()
	file.close()

	# Split the original .pg file into 2 parts: code and text
	# Use different class methods to deal with those two parts

	# First step: split .pg file

	# This is the begin of the part : code 
	script_begin_temp = data.find('$showPartialCorrectAnswers = 1;')
	if script_begin_temp != -1:
		script_begin = script_begin_temp+len('$showPartialCorrectAnswers = 1;')
	else:
		script_begin = data.find('TEXT(beginproblem);') + len('TEXT(beginproblem);')
	script_end = data.find('BEGIN_PGML') # This is the end of the part: code
	word_begin = script_end + len('BEGIN_PGML') 	# This is the begin of the part : text
	word_end = data.find('END_PGML') # This is the end of the part : text

	# Get the splited file for input 
	script = data[script_begin:script_end]
	word = data[word_begin:word_end]


	# Second step: translate 'code' and 'text' using different class methods 

	# Translate 'text' using class MyText
	n = text1.MyText()
	n.build()		# Build lexer

	word = re.sub('\[\$BCENTER\]|\[\$ECENTER\]|\[\$BITALIC\]|\[\$EITALIC\]|\\\\begin\{align<b>\}|\\end\{align</b>\}|\\\\begin\\{eqnarray\*\}|\\end\{eqnarray\*\}','',word)

	n.test(word) 	# Test the lexer of MyText, usually we don't need to print this out
	n.build_parser()# Build parser
	t = n.test_parser(word)	# Test the parser and generate the whole text in XML as we want
	answer = n.MyAnswer()	# Some output generated by MyText as 'answers'
							# This needs to be handled by 'code' part





	s = '''
<problem>
    <script>
from math import factorial as f
from math import ceil
from math import sqrt
from math import exp
from math import log
from math import erf
from math import e
import random

def C(n,m):
    return f(n)/f(m)/f(n-m)

def myrandom(start,stop,step=1):
    return random.randint(0, int((stop - start) / step)) * step + start

def Phi(x):
    #Cumulative distribution function for the standard normal distribution
    return (1.0 + erf(x / sqrt(2.0))) / 2.0

def Q(x):
	return 1-Phi(x)

'''
	c = script + answer + '</script>\n'







	sample = ''
	#Deal with attribute'Sample' in formula answers
	if(script.find('Context()->variables->add(') != -1):
		var = []
		bound_l = []
		bound_u = []
		
		while 1:
			pos_beg = script.find('Context()->variables->add(')
			print pos_beg
			if pos_beg == -1:
				break
			else:
				pos_beg += len('Context()->variables->add(')
			pos_mid = script.find(' => [\'Real\', limits=>[')
			if pos_mid == -1:
				pos_mid = script.find(' => \'Real\');')
				var.append(script[pos_beg:pos_mid])
				bound_l.append(1)
				bound_u.append(20)
				script = script[pos_mid+len(' => \'Real\');'):]
			else:
				pos_mid_2 = script.find(' => [\'Real\', limits=>[') + len(' => [\'Real\', limits=>[')
				pos_end = script.find('], resolution=>1]);')
				var.append(script[pos_beg:pos_mid])
				bound_l.append(int(script[pos_mid_2:pos_end].split(',')[0]))
				bound_u.append(int(script[pos_mid_2:pos_end].split(',')[1]))
				script = script[pos_end+len('], resolution=>1]);'):]
			print script

		for v in var:
			sample = sample + v + ','
		sample = sample[:-1] + '@'
		for bl in bound_l:
			sample = sample + str(bl) + ','
		sample = sample[:-1] + ':'
		for bu in bound_u:
			sample = sample + str(bu) + ','
		sample = sample[:-1] + '#10'

		print sample

	if sample == '':
		#sample = 'm,n,i,k,x,y,z@1,1,1,1,1,1,1:10,10,10,10,10,10,10,10#10'
		#sample = 'p,k,n@0,100,2000:1,1000,10000#10'
		#sample = 'k,i,j,n@1,1,1,1:100,100,100,100#10'
		sample = 'p,n@0.01,1:0.99,100#10'

	# Open a new XML file with the same name as the original PG file 
	# Write all contents back
	write_file = open(filename[:filename.find('.pg')]+'.xml','w')
	#print re.findall('{Sample}',t)
	t = re.sub('{Sample}',sample,t)
	print t
	c = re.sub('Context.*|\$|##.*|\[|\]|;','',c)
	c = re.sub('random','myrandom',c)
	c = re.sub('comb','C',c)
	c = re.sub('fact','f',c)
	c = s + c
	
	

	#print t.format(Sample=sample)
	write_file.write( c+t)
	#write_file.write(c+t)
	write_file.close()


