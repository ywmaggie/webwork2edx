## DESCRIPTION
##   Apply the Central Limit Theorem
## ENDDESCRIPTION

## KEYWORDS('Probability', 'Central Limit Theorem')
## Tagged by nhamblet

## DBsubject('Probability')
## DBchapter('Theory')
## DBsection('The Central Limit Theorem')
## Date('')
## Author('')
## Institution('Rochester')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGML.pl",
"MathObjects.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGgraphmacros.pl",
"PGnumericalmacros.pl",
"PGstatisticsmacros.pl"
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

package my::Function::numeric;
our @ISA = ('Parser::Function::numeric');

sub Q {
   shift; my $x = shift;
   return main::normal_prob($x, 'infty', mean=>0, deviation=>1);
}

sub Phi {
   shift; my $x = shift;
   return main::normal_prob('-infty', $x, mean=>0, deviation=>1);
}

sub erf {
   shift; my $x = shift;
   $phi = main::normal_prob('-infty', $x*sqrt(2), mean=>0, deviation=>1);
   $a = 2*$phi-1;
   return $a;
}

package main;

Context("Numeric");
Context()->functions->add(
erf =>{class=>"my::Function::numeric", nocomplex=>1},
Q =>{class=>"my::Function::numeric", nocomplex=>1}, 
Phi =>{class=>"my::Function::numeric", nocomplex=>1}
);
Context()->flags->set(tolerance=>0.001);

Context()->texStrings;


Context()->variables->are(
      n => ['Real', limits=>[1,100], resolution=>1],
      k => ['Real', limits=>[1,100], resolution=>1],
    );

$p = "(k/(e*n))";
$tk = random(7,13,1);

BEGIN_PGML
There are [`n`] processes [`P_1, \ldots, P_n`] that all want access to a single database.
The problem is that if more than one process tries to access the database at the same time, 
none of them will succeed due to a particular locking mechanism. So instead, we use the 
following randomized protocol:

For time [`t = 1, 2, \ldots`]:  
    Each processor flips a coin with heads probability [`1/n`]  
    If heads, it attempts to access the database at time [`t`]

Assume for all of the following questions that every process [`P_i`] tries to access the database at every timestep, even when [`P_i`] has previously accessed the database.  

1. Fix any time [`t`], and let [`E_{t,i}`] be the event that process [`P_i`] successfully
accesses the database at that time. This means that [`P_i`]'s coin flip turns up heads,
whereas the coin flip of every other processor turns up tails. What is [`\mbox{Pr}(E_{t,i})`]
exactly? [________]{(1/n)*( (1-(1/n))**(n-1) )}
2. Using the fact that [`1-x \sim e^{-x}`], what's an approximation to [`(1-\frac{1}{n})^{n-1}`]?  [_________]{exp((1/n)-1)}
3. Since [`1-\frac{1}{n} \sim 1`] for large n and the approximation from (2), what number can be used to approximate [`(1-\frac{1}{n})^{n-1}`]?  [_______]{"1/e"}  
4. Use the result from (3), [`\mbox{Pr}(E_{t,i}) \sim `][______]{1/(e*n)}  Henceforth pretend that this approximation is exact, 
and use it in the next two questions.
5. Suppose that after processes try to access the database at time [`t`], there are still [`k`] processes that have not yet been able to access the database.  What is the probability one of these [`k`] processes accesses the database at time [`t+1`]?  [_______]{$p}  Henceforth, we will define a random variable [`T_k = `] "time taken for one of [`k`] specified processes to access the database", so you just calculated [`P(T_k = 1)`].  
6. What is the [`P(T_k = 2)`]?  [________]{$p*(1-$p)}
7. What is the [`P(T_k = [$tk])`]?  [________]{$p*(1-$p)**($tk-1)}
8. What is the expected additional time it takes until one of these [`k`] processes accesses the database?  Use the fact that for [`-1 < x < 1`], [`\sum_{i=1}^{\infty}{i (1-x)^{i-1}} = \frac{1}{x^2}`] [_______]{1/$p}  Note that this is [`\mathbb{E}(T_k)`].  
9. Roughly what is the expected time by which _all_ processes will have been able to access the database?  This is [`\sum_{i=1}^{n}{T_k}`].  Use a well-known result for harmonic series: [`\sum_{i=1}^{m}{\frac{1}{i}} \sim ln(m)`].  [_______]{e*n*log(n)}  

END_PGML

ENDDOCUMENT();       # This should be the last executable line in the problem.