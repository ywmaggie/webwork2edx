
<problem>
    <script>
from math import factorial as f
from math import ceil
from math import sqrt
from math import exp
from math import log
from math import erf
from math import e
import random

def C(n,m):
    return f(n)/f(m)/f(n-m)

def myrandom(start,stop,step=1):
    return random.randint(0, int((stop - start) / step)) * step + start

def Phi(x):
    #Cumulative distribution function for the standard normal distribution
    return (1.0 + erf(x / sqrt(2.0))) / 2.0

def Q(x):
	return 1-Phi(x)






answer1 = 1.0*2
answer2 = "2/(j-i+1)"
answer3 = "n"
answer4 = "n-1"
answer5 = "n-2"
answer6 = "2*n/k"
answer7 = "n*2*log(n)"

</script>
<p><br/>
<br/>
---<br/>
The <b>quicksort</b> algorithm works as follows: (For more information see http://en.wikipedia.org/wiki/Quicksort)<br/>
---<br/>
<b>function</b> quicksort(S)  <br/>
- Pick an element \(v\) from \(S\) at random  <br/>
- Split \(S\) into three pieces:  <br/>
   - \(S_L\), elements less than \(v\)  <br/>
   - \(S_v\), elements equal to \(v\)  <br/>
   - \(S_R\), elements greater than \(v\)   <br/>
- Return \(\mbox{quicksort}(S_L) \circ S_v \circ \mbox{quicksort}(S_R)\)    (\(\circ\) is concatenation)<br/>
---<br/>
In this problem, we will analyze the expected running time of this algorithm.<br/>
First, notice that all the work is done in splitting the various arrays: the original array <br/>
and the many subarrays generated by recursive invocations. Each split operation involves<br/>
_comparing_ all elements of the array to the _split element_ \(v\). Therefore<br/>
<b><br/>
\( \mbox{total running time of quicksort} \ \ = \ \ \sum_{i,j} X_{ij} \)<br/>
</b><br/>
where \(X_{ij}\) is the number of times \(Si\) and \(Sj\) are compared; such comparisons occur<br/>
only when one of them is the split element.<br/>
It will be convenient to let \(S_{(i)}\) denote the \(i\)th largest element in the <br/>
array; and to instead define \(X_{ij}\) as the number of times \(S_{(i)}\) and \(S_{(j)}\) get<br/>
compared. The formula for the running time remains the same.<br/>
The second useful observation is that \(X_{ij}\) is never more than 1: if \(S_{(i)}\) and<br/>
\(S_{(j)}\) are compared at some point, it means one of them is the split element; thus they<br/>
will end up in separate arrays and never again be compared. Let \(p_{ij}\) be the probability<br/>
that \(S_{(i)}\) and \(S_{(j)}\) are compared at some stage. Thus \(\mathbb{E}(X_{ij}) = p_{ij}\).<br/>
1. Suppose \(j &gt; i\). Consider the elements \(S_{(i)}, S_{(i+1)}, \ldots, S_{(j-1)}, S_{(j)}\)<br/>
in the original array. At some point, this group of elements will be split: they will no <br/>
longer remain within a single subarray. This happens when the split element \(v\) ends up <br/>
being one of these \(j-i+1\) elements.  The pivot first splitting this subarray will land with equal probability on one of the \(j-i+1\) elements: in how many cases will the this result in \(i\) and \(j\) being compared?  <numericalresponse answer="$answer1">
                    <responseparam type="tolerance" default="1%" />
                    <formulaequationinput />
                </numericalresponse>
</p><p>  With this in mind, \(p_{ij} = \)<formularesponse type="ci" samples="k,m,n@1,1,1:100,100,100#10" answer="$answer2">
                    <responseparam type="tolerance" default="0.00001"/>
                    <formulaequationinput />
                </formularesponse>
</p><p>  <br/>
2. For \(j=i\) we are talking about a subsequence of length one, how many subsequences of length one are there in \(S_{(1)}, S_{(2)}, \ldots, S_{(n-1)}, S_{(n)}\)? <formularesponse type="ci" samples="k,m,n@1,1,1:100,100,100#10" answer="$answer3">
                    <responseparam type="tolerance" default="0.00001"/>
                    <formulaequationinput />
                </formularesponse>
</p><p><br/>
3. How about for \(j=i+1\)? these are sequences of length 2, how many sequences of length two are there? <formularesponse type="ci" samples="k,m,n@1,1,1:100,100,100#10" answer="$answer4">
                    <responseparam type="tolerance" default="0.00001"/>
                    <formulaequationinput />
                </formularesponse>
</p><p>?  How about sequences of length 3? \(j=i+2\)?  <formularesponse type="ci" samples="k,m,n@1,1,1:100,100,100#10" answer="$answer5">
                    <responseparam type="tolerance" default="0.00001"/>
                    <formulaequationinput />
                </formularesponse>
</p><p><br/>
4. Let \(l_k = \sum_{i=1}^{n-k+1} {X_{i,i+k-1}}\) be a random variable giving the number of comparisons between elements that are exactly \(k-1\) units apart.  <br/>
5. <b>Roughly</b> what is \(\mathbb{E}(l_k)\) in terms of \(n\) and \(k\)?  <formularesponse type="ci" samples="k,m,n@1,1,1:100,100,100#10" answer="$answer6">
                    <responseparam type="tolerance" default="0.00001"/>
                    <formulaequationinput />
                </formularesponse>
</p><p>  Note: for \(k = j - i + 1\), \(p_{ij}\) can be written in terms of \(k\): \(p_{ij} = 2/k\).  Assume for any \(k\), the number of sequences of length \(k\) is roughly \(n\).  <br/>
6. Using the harmonic series approximation \(\sum_{i=1}^{n}{1/i} \sim \ln(n)\) and your results above, <b>roughly</b> what is the expected runtime of quicksort?  <formularesponse type="ci" samples="k,m,n@1,1,1:100,100,100#10" answer="$answer7">
                    <responseparam type="tolerance" default="0.00001"/>
                    <formulaequationinput />
                </formularesponse>
</p><p><br/>
This is \(O(n \log n)\), right?<br/>
</p>
</problem>