## DESCRIPTION
##   Apply the Central Limit Theorem
## ENDDESCRIPTION

## KEYWORDS('Probability', 'Central Limit Theorem')
## Tagged by nhamblet

## DBsubject('Probability')
## DBchapter('Theory')
## DBsection('The Central Limit Theorem')
## Date('')
## Author('')
## Institution('Rochester')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGML.pl",
"MathObjects.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGgraphmacros.pl",
"PGnumericalmacros.pl",
"PGstatisticsmacros.pl"
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

package my::Function::numeric;
our @ISA = ('Parser::Function::numeric');

sub Q {
   shift; my $x = shift;
   return main::normal_prob($x, 'infty', mean=>0, deviation=>1);
}

sub Phi {
   shift; my $x = shift;
   return main::normal_prob('-infty', $x, mean=>0, deviation=>1);
}

sub erf {
   shift; my $x = shift;
   $phi = main::normal_prob('-infty', $x*sqrt(2), mean=>0, deviation=>1);
   $a = 2*$phi-1;
   return $a;
}

package main;

Context("Numeric");
Context()->functions->add(
erf =>{class=>"my::Function::numeric", nocomplex=>1},
Q =>{class=>"my::Function::numeric", nocomplex=>1}, 
Phi =>{class=>"my::Function::numeric", nocomplex=>1}
);
Context()->flags->set(tolerance=>0.001);

Context()->texStrings;

Context()->variables->are(
      n => ['Real', limits=>[1,100], resolution=>1],
      i => ['Real', limits=>[1,100], resolution=>1],
      k => ['Real', limits=>[1,100], resolution=>1],
    );

BEGIN_PGML

[``\newcommand{\E}{\mathbb{E}}``]
[``\newcommand{\R}{\mathbb{R}}``]
[``\newcommand{\bP}{\mathbb{P}}``]
[``\newcommand{\var}{\mbox{var}}``]
[``\newcommand{\pr}{\mbox{Pr}}``]
[``\def\X{{\cal X}}``]
[``\def\cost{{\mbox{cost}}}``]
[``\def\U{{\cal U}}``]
[``\renewcommand{\log}{\mbox{log}_2}``]

#### The power of two choices ####

Here's a variant on the balls and bins setup. As usual, you have before you a 
row of [`n`] bins, along with a collection of [`n`] identical balls. But now, 
when throwing each ball, _you pick two bins at random and you put the
ball in whichever of them is less full_.

It turns out, using an analysis that is too complicated to get into here, that
under this small change, the maximum bin size will be just [`O(\log \log n)`] 
instead of [`O(\log n)`].

This inspires an alternative hashing scheme:

1\. Pick _two_ completely random functions [`h_1, h_2: \U \rightarrow \{1,2,\ldots, n\}`]. 


2\. Create a table [`T`] of size [`n`], each of whose entries is a pointer to a 
linked list, initialized to null. 


3\. For each [`x_i`], store it in either the linked list at [`T[h_1(x_i)]`] or [`T[h_2(x_i)]`],
whichever is shorter.


4\. Given a query [`q`], look through _both_ the linked list at [`T[h_1(q)]`] and
at [`T[h_2(q)]`] to see if it's there.


The storage requirement is still [`O(n)`], the average query time is still [`O(1)`], but now
the worst case query time drops to [`O(\log \log n)`].

---

What is the worst case query time for [`n = 2^{64}`] ? O([_________]{6})

END_PGML

ENDDOCUMENT();       # This should be the last executable line in the problem.